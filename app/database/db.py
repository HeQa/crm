from tortoise.contrib.fastapi import register_tortoise
from app.config import config, TORTOISE_ORM
import asyncpg
from tortoise import Tortoise


async def ensure_db_exists(db_url: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    # –ü–∞—Ä—Å–∏–º URL, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'postgres://user:pass@host:5432/dbname')
    db_name = db_url.split("/")[-1].split("?")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º 'dbname'

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ë–î 'postgres' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ë–î
    temp_url = db_url.replace(db_name, "postgres")

    try:
        conn = await asyncpg.connect(temp_url)
        await conn.execute(f"CREATE DATABASE {db_name}")
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —Å–æ–∑–¥–∞–Ω–∞")
        await conn.close()
    except asyncpg.DuplicateDatabaseError:
        print(f"üîπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")

async def init_tortoise():
    """–Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tortoise"""
    await Tortoise.init(
        config=TORTOISE_ORM
    )
    await Tortoise.generate_schemas()
    print("üü¢ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

async def close_db():
    await Tortoise.close_connections()
    print("üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç—ã")

def init_db(app):
    register_tortoise(
        app,
        db_url=config.DATABASE_URL,
        modules={"app": ["app.database.models"]},
        generate_schemas=True,
        add_exception_handlers=True,
    )


if __name__ == '__main__':
    import asyncio
    from fastapi import FastAPI
    from fastapi.middleware.cors import CORSMiddleware
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app = FastAPI()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î
    asyncio.run(ensure_db_exists(config.DATABASE_URL))

    asyncio.run(init_tortoise())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Tortoise
    init_db(app)

    print("üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")